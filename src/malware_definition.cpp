#include "import_data.h"
#include "malware_definition.h"
#include <vector>
#include <string>
#include <iostream>

MalwareDefinition::MalwareDefinition()
{
	std::string name;
	std::vector<ImportData*> imports;

	this->name = name;
	this->imports_used = imports;
}

MalwareDefinition::MalwareDefinition(std::string name, std::vector<ImportData*> imports_used)
{
        this->name = name;
        this->imports_used = imports_used;
}

// Function for when child object is not used
// Child object should have its own better tailored calculateProbability function
// Checks for imports in file that match imports specified in creation of object
double MalwareDefinition::calculateProbability(std::vector<ImportData*> imports)
{
	int match_count = 0;
	
        for (std::vector<ImportData*>::iterator iter_from_file = imports.begin(); iter_from_file != imports.end(); iter_from_file++)
        {
                for (std::vector<ImportData*>::iterator iter_from_def = this->imports_used.begin(); iter_from_def != this->imports_used.end(); iter_from_def++)
                {
                        std::cout << *iter_from_def << "\n";
			const char *def_import = (*iter_from_def)->toString()->c_str();
			const char *file_import = (*iter_from_file)->toString()->c_str();
			int i = 0;
			int j = 0;
			char c;
			char init_a = '\0';
			char init_b = '\0';
			char *lower_def_import = &init_a;
			char *lower_file_import = &init_b;

			while (def_import[i])
			{
				c = def_import[i];
				lower_def_import[i] = tolower(c);
				i++;
			}

			lower_def_import[i] = '\0';

			while (file_import[j])
			{
				c = file_import[j];
				lower_file_import[j] = tolower(c);
				j++;
			}

			lower_file_import[j] = '\0';

			std::string def_string (lower_def_import);
			std::string file_string (lower_file_import);

			if (def_string == file_string)
			{
				match_count++;
				std::cout << def_string << "\n";
				std::cout << file_string << "\n";
			}
                }
        }
	
	return match_count / this->imports_used.size();
}

