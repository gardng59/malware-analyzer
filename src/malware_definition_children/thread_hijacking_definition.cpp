#include "../import_data.h"
#include "../malware_definition.h"
#include "thread_hijacking_definition.h"
#include <vector>
#include <string>
#include <iostream>

ThreadHijackingDefinition::ThreadHijackingDefinition(): MalwareDefinition()
{
	this->name = "thread hijacking";

	std::vector<ImportData*> imports;

	this->imports_used = imports;
}

double ThreadHijackingDefinition::calculateProbability(std::vector<ImportData*> imports)
{
	double probability = 0;

	std::string open_thread ("kernel32.openthread");
	bool open_thread_matched = false;
	std::string suspend_thread ("kernel32.suspendthread");
	bool suspend_thread_matched = false;
	std::string get_thread_context ("kernel32.getthreadcontext");
	bool get_thread_context_matched = false;
	std::string set_thread_context ("kernel32.setthreadcontext");
	bool set_thread_context_matched = false;


	for (std::vector<ImportData*>::iterator iter = imports.begin(); iter != imports.end(); iter++)
        {
                std::string *curr_string ((*iter)->toString());

                for (unsigned i = 0; i < curr_string->size(); i++)
                {
                        char lower_char = (char)tolower(curr_string->at(i));
                        char lower_c_str[1];
                        lower_c_str[0] = lower_char;
                        std::string lower (&lower_c_str[0]);
                        curr_string->replace(i, 1, lower);
                }

                if (*curr_string == open_thread)
                {
                        open_thread_matched = true;
                        continue;
                }
                if (*curr_string == suspend_thread)
                {
                        suspend_thread_matched = true;
                        continue;
                }
                if (*curr_string == get_thread_context)
                {
                        get_thread_context_matched = true;
                        continue;
                }
                if (*curr_string == set_thread_context)
                {
                        set_thread_context_matched = true;
                        continue;
                }
        }

        if (open_thread_matched)
        {
        	probability += 20;
        }
        if (suspend_thread_matched)
        {
        	probability += 20;
        }
        if (get_thread_context_matched)
        {
        	probability += 20;
        }
        if (set_thread_context_matched)
        {
        	probability += 20;
        }
        
	
	return probability;
}
