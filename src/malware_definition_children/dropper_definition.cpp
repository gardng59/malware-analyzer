#include "../import_data.h"
#include "../malware_definition.h"
#include "dropper_definition.h"
#include <vector>
#include <string>
#include <iostream>

DropperDefinition::DropperDefinition(): MalwareDefinition()
{
	this->name = "dropper";

	std::vector<ImportData*> imports;

	this->imports_used = imports;
}

double DropperDefinition::calculateProbability(std::vector<ImportData*> imports)
{
	double probability = 0;

	std::string find_resource ("kernel32.findresource");
	std::string find_resource_a ("kernel32.findresourcea");
	std::string find_resource_exa ("kernel32.findresourceexa");
	bool find_resource_matched = false;
	std::string load_resource ("kernel32.loadresource");
	bool load_resource_matched = false;
	std::string lock_resource ("kernel32.lockresource");
	bool lock_resource_matched = false;
	std::string size_of_resource ("kernel32.sizeofresource");
	bool size_of_resource_matched = false;
	std::string create_file ("kernel32.createfile");
	std::string create_file_a ("kernel32.createfilea");
	std::string create_file_w ("kernel32.createfilew");
	bool create_file_matched = false;
	std::string write_file ("kernel32.writefile");
	std::string write_file_ex ("kernel32.writefileex");
	bool write_file_matched = false;


	for (std::vector<ImportData*>::iterator iter = imports.begin(); iter != imports.end(); iter++)
        {
                std::string *curr_string ((*iter)->toString());

                for (unsigned i = 0; i < curr_string->size(); i++)
                {
                        char lower_char = (char)tolower(curr_string->at(i));
                        char lower_c_str[1];
                        lower_c_str[0] = lower_char;
                        std::string lower (&lower_c_str[0]);
                        curr_string->replace(i, 1, lower);
                }

                if (*curr_string == find_resource || *curr_string == find_resource_a || *curr_string == find_resource_exa)
                {
                        find_resource_matched = true;
                        continue;
                }
                if (*curr_string == load_resource)
                {
                        load_resource_matched = true;
                        continue;
                }
                if (*curr_string == lock_resource)
                {
                        lock_resource_matched = true;
                        continue;
                }
                if (*curr_string == size_of_resource)
                {
                        size_of_resource_matched = true;
                        continue;
                }
                if (*curr_string == create_file || *curr_string == create_file_a || *curr_string == create_file_w)
                {
                        create_file_matched = true;
                        continue;
                }
                if (*curr_string == write_file || *curr_string == write_file_ex)
                {
                        write_file_matched = true;
                        continue;
                }
        }

        if (find_resource_matched)
        {
        	probability += 15;
        }
        if (load_resource_matched)
        {
        	probability += 15;
        }
        if (lock_resource_matched)
        {
        	probability += 15;
        }
        if (size_of_resource_matched)
        {
        	probability += 15;
        }

        if (probability >= 30)
        {
        	if (create_file_matched)
        	{
        		probability += 15;
        	}
        	if (write_file_matched)
        	{
        		probability += 15;
        	}
        }
        else if (probability >= 15)
        {
        	if (create_file_matched)
        	{
        		probability += 10;
        	}
        	if (write_file_matched)
        	{
        		probability += 10;
        	}
        }
        else
        {
        	if (create_file_matched)
        	{
        		probability += 5;
        	}
        	if (write_file_matched)
        	{
        		probability += 5;
        	}
        }
        
	
	return probability;
}
