#include "../import_data.h"
#include "../malware_definition.h"
#include "persistence_definition.h"
#include <vector>
#include <string>
#include <iostream>

PersistenceDefinition::PersistenceDefinition(): MalwareDefinition()
{
	this->name = "persistence";

	std::vector<ImportData*> imports;

	this->imports_used = imports;
}

double PersistenceDefinition::calculateProbability(std::vector<ImportData*> imports)
{
	double probability = 0;

	std::string change_service_config ("advapi32.changeserviceconfig");
        bool change_service_config_matched = false;
        std::string control_service ("advapi32.controlservice");
        bool control_service_matched = false;
        std::string create_service ("advapi32.createservice");
        bool create_service_matched = false;
        std::string net_sched_job_add ("netapi32.netschedulejobadd");
        bool net_sched_job_add_matched = false;
        std::string reg_set_val ("advapi32.regsetvalue");
        bool reg_set_val_matched = false;
        std::string create_reg_key ("ntoskrnl.rtlcreateregistrykey");
        bool create_reg_key_matched = false;
        std::string write_reg_val ("ntoskrnl.writeregistryvalue");
        bool write_reg_val_matched = false;
        std::string set_file_attr ("kernel32.setfileattributes");
        bool set_file_attr_matched = false;
        std::string start_service_ctrl_dipatcher ("advapi32.startservicectrldispatcher");
        bool start_service_ctrl_dipatcher_matched = false;
        std::string start_service ("advapi32.startservice");
        bool start_service_matched = false;


	for (std::vector<ImportData*>::iterator iter = imports.begin(); iter != imports.end(); iter++)
        {
                std::string *curr_string ((*iter)->toString());

                for (unsigned i = 0; i < curr_string->size(); i++)
                {
                        char lower_char = (char)tolower(curr_string->at(i));
                        char lower_c_str[1];
                        lower_c_str[0] = lower_char;
                        std::string lower (&lower_c_str[0]);
                        curr_string->replace(i, 1, lower);
                }

                if (*curr_string == change_service_config)
                {
                        change_service_config_matched = true;
                        continue;
                }
                if (*curr_string == control_service)
                {
                        control_service_matched = true;
                        continue;
                }
                if (*curr_string == create_service)
                {
                        create_service_matched = true;
                        continue;
                }
                if (*curr_string == net_sched_job_add)
                {
                        net_sched_job_add_matched = true;
                        continue;
                }
                if (*curr_string == reg_set_val)
                {
                        reg_set_val_matched = true;
                        continue;
                }
                if (*curr_string == create_reg_key)
                {
                        create_reg_key_matched = true;
                        continue;
                }
                if (*curr_string == write_reg_val)
                {
                        write_reg_val_matched = true;
                        continue;
                }
                if (*curr_string == set_file_attr)
                {
                        set_file_attr_matched = true;
                        continue;
                }
                if (*curr_string == start_service_ctrl_dipatcher)
                {
                        start_service_ctrl_dipatcher_matched = true;
                        continue;
                }
                if (*curr_string == start_service)
                {
                        start_service_matched = true;
                        continue;
                }
        }

        double max_probability = 0;

        if (change_service_config_matched)
        {
        	probability += 25;
        }
        if (control_service_matched)
        {
                probability += 25;
        }
        if (create_service_matched)
        {
                probability += 25;
        }

        if (probability > max_probability)
        {
                max_probability = probability;
        }

        probability = 0;

        if (reg_set_val_matched)
        {
                probability += 25;
        }
        if (create_reg_key_matched)
        {
                probability += 25;
        }
        if (write_reg_val_matched)
        {
                probability += 25;
        }

        if (probability > max_probability)
        {
                max_probability = probability;
        }

        probability = max_probability;

        if (net_sched_job_add_matched)
        {
                probability += 5;
        }
        if (set_file_attr_matched)
        {
                probability += 5;
        }
        if (start_service_ctrl_dipatcher_matched)
        {
                probability += 5;
        }
        if (start_service_matched)
        {
                probability += 5;
        }
        
	
	return probability;
}
