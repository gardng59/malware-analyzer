#include "../import_data.h"
#include "../malware_definition.h"
#include "IAT_hooking_definition.h"
#include <vector>
#include <string>
#include <iostream>

IATHookingDefinition::IATHookingDefinition(): MalwareDefinition()
{
	this->name = "IAT hooking";

	std::vector<ImportData*> imports;

	this->imports_used = imports;
}

double IATHookingDefinition::calculateProbability(std::vector<ImportData*> imports)
{
	double probability = 0;

	std::string create_window_ex ("user32.createwindowex");
        std::string create_window_exa ("user32.createwindowexa");
        std::string create_window_exw ("user32.createwindowexw");
        bool create_window_matched = false;
        std::string register_class_ex ("user32.registerclassex");
        std::string register_class_exa ("user32.registerclassexa");
        std::string register_class_exw ("user32.registerclassexw");
        bool register_class_matched = false;
        std::string virtual_protect ("kernel32.virtualprotect");
        std::string virtual_protect_ex ("kernel32.virtualprotectex");
        bool virtual_protect_matched = false;


	for (std::vector<ImportData*>::iterator iter = imports.begin(); iter != imports.end(); iter++)
        {
                std::string *curr_string ((*iter)->toString());

                for (unsigned i = 0; i < curr_string->size(); i++)
                {
                        char lower_char = (char)tolower(curr_string->at(i));
                        char lower_c_str[1];
                        lower_c_str[0] = lower_char;
                        std::string lower (&lower_c_str[0]);
                        curr_string->replace(i, 1, lower);
                }

                if (*curr_string == create_window_ex || *curr_string == create_window_exa || *curr_string == create_window_exw)
                {
                        create_window_matched = true;
                        continue;
                }
                if (*curr_string == register_class_ex || *curr_string == register_class_exa || *curr_string == register_class_exw)
                {
                        register_class_matched = true;
                        continue;
                }
                if (*curr_string == virtual_protect || *curr_string == virtual_protect_ex)
                {
                        virtual_protect_matched = true;
                        continue;
                }
        }

        if (create_window_matched)
        {
                probability += 25;
        }
        if (register_class_matched)
        {
                probability += 25;
        }
        if (virtual_protect_matched)
        {
                probability += 25;
        }
        
	
	return probability;
}
