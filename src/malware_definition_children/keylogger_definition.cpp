#include "../import_data.h"
#include "../malware_definition.h"
#include "keylogger_definition.h"
#include <vector>
#include <string>
#include <iostream>

KeyloggerDefinition::KeyloggerDefinition(): MalwareDefinition()
{
	this->name = "keylogger";
	
	std::vector<ImportData*> imports;

	this->imports_used = imports;
}

double KeyloggerDefinition::calculateProbability(std::vector<ImportData*> imports)
{
	double probability = 0;

	// System hook keylogger imports
	std::string set_hook ("user32.setwindowshookex");
	bool set_hook_matched = false;
	std::string set_hook_a ("user32.setwindowshookexa");
	bool set_hook_a_matched = false;
	std::string set_hook_w ("user32.setwindowshookexw");
	bool set_hook_w_matched = false;
	std::string unhook ("user32.unhookwindowshookex");
	bool unhook_matched = false;

	// cyclical information keyboard request keylogger imports
	std::string get_async_key_state ("user32.getasynckeystate");
	bool get_async_key_state_matched = false;
	std::string get_key_state ("user32.getkeystate");
	bool get_key_state_matched = false;
	std::string get_keyboard_state ("user32.getkeyboardstate");
	bool get_keyboard_state_matched = false;

	for (std::vector<ImportData*>::iterator iter = imports.begin(); iter != imports.end(); iter++)
        {
		std::string *curr_string ((*iter)->toString());

		for (unsigned i = 0; i < curr_string->size(); i++)
		{
			char lower_char = (char)tolower(curr_string->at(i));
			char lower_c_str[1];
			lower_c_str[0] = lower_char;
			std::string lower (&lower_c_str[0]);
			curr_string->replace(i, 1, lower);
		}
		std::cout << "Curr: " << *curr_string << "\n";

		if (*curr_string == set_hook)
		{
			set_hook_matched = true;
			continue;
		}
		if (*curr_string == set_hook_a)
		{
			set_hook_a_matched = true;
			continue;
		}
		if (*curr_string == set_hook_w)
		{
			set_hook_w_matched = true;
			continue;
		}
		if (*curr_string == unhook)
		{
			unhook_matched = true;
			continue;
		}
		if (*curr_string == get_async_key_state)
		{
			get_async_key_state_matched = true;
			continue;
		}
		if (*curr_string == get_key_state)
		{
			get_key_state_matched = true;
			continue;
		}
		if (*curr_string == get_keyboard_state)
		{
			get_keyboard_state_matched = true;
		}
        }

	// Check if imports needed for system hook keylogger were found
	if ((set_hook_matched || set_hook_a_matched || set_hook_w_matched) && unhook_matched)
	{
		if (probability < 60)
		{
			probability = 60;
		}
	}
	else if (set_hook_matched || set_hook_a_matched || set_hook_w_matched)
	{
		if (probability < 40)
		{
			probability = 40;
		}
	}

	// Check imports for cyclical information keyboard request
	if (get_async_key_state_matched || get_key_state_matched || get_keyboard_state_matched)
	{
		if (probability < 50)
		{
			probability = 50;
		}
	}

	return probability;
}
