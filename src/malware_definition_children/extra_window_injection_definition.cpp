#include "../import_data.h"
#include "../malware_definition.h"
#include "extra_window_injection_definition.h"
#include <vector>
#include <string>
#include <iostream>

ExtraWindowInjectionDefinition::ExtraWindowInjectionDefinition(): MalwareDefinition()
{
	this->name = "extra window injection";

	std::vector<ImportData*> imports;

	this->imports_used = imports;
}

double ExtraWindowInjectionDefinition::calculateProbability(std::vector<ImportData*> imports)
{
	double probability = 0;

	std::string find_window ("user32.findwindow");
        std::string find_window_a ("user32.findwindowa");
        std::string find_window_w ("user32.findwindoww");
        bool find_window_matched = false;
        std::string get_window_long ("user32.getwindowlong");
        std::string get_window_long_a ("user32.getwindowlonga");
        std::string get_window_long_w ("user32.getwindowlongw");
        bool get_window_long_matched = false;
        std::string create_event ("kernel32.createevent");
        std::string create_event_a ("kernel32.createeventa");
        std::string create_event_w ("kernel32.createeventw");
        bool create_event_matched = false;
        std::string set_window_long ("user32.setwindowlong");
        std::string set_window_long_a ("user32.setwindowlonga");
        std::string set_window_long_w ("user32.setwindowlongw");
        bool set_window_long_matched = false;
        std::string send_notify_message ("user32.sendnotifymessage");
        std::string send_notify_message_a ("user32.sendnotifymessagea");
        std::string send_notify_message_w ("user32.sendnotifymessagew");
        bool send_notify_message_matched = false;



	for (std::vector<ImportData*>::iterator iter = imports.begin(); iter != imports.end(); iter++)
        {
                std::string *curr_string ((*iter)->toString());

                for (unsigned i = 0; i < curr_string->size(); i++)
                {
                        char lower_char = (char)tolower(curr_string->at(i));
                        char lower_c_str[1];
                        lower_c_str[0] = lower_char;
                        std::string lower (&lower_c_str[0]);
                        curr_string->replace(i, 1, lower);
                }

                if (*curr_string == find_window || *curr_string == find_window_a || *curr_string == find_window_w)
                {
                        find_window_matched = true;
                        continue;
                }
                if (*curr_string == get_window_long || *curr_string == get_window_long_a || *curr_string == get_window_long_w)
                {
                        get_window_long_matched = true;
                        continue;
                }
                if (*curr_string == create_event || *curr_string == create_event_a || *curr_string == create_event_w)
                {
                        create_event_matched = true;
                        continue;
                }
                if (*curr_string == set_window_long || *curr_string == set_window_long_a || *curr_string == set_window_long_w)
                {
                        set_window_long_matched = true;
                        continue;
                }
                if (*curr_string == send_notify_message || *curr_string == send_notify_message_a || *curr_string == send_notify_message_w)
                {
                        send_notify_message_matched = true;
                        continue;
                }
        }

        if (find_window_matched)
        {
                probability += 17;
        }
        if (get_window_long_matched)
        {
                probability += 17;
        }
        if (create_event_matched)
        {
                probability += 17;
        }
        if (set_window_long_matched)
        {
                probability += 17;
        }
        if (send_notify_message_matched)
        {
                probability += 17;
        }
        
	
	return probability;
}
