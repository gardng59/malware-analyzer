#include "../import_data.h"
#include "../malware_definition.h"
#include "command_and_control_definition.h"
#include <vector>
#include <string>
#include <iostream>

CommandAndControlDefinition::CommandAndControlDefinition(): MalwareDefinition()
{
	this->name = "command and control";

	std::vector<ImportData*> imports;

	this->imports_used = imports;
}

double CommandAndControlDefinition::calculateProbability(std::vector<ImportData*> imports)
{
	double probability = 0;

	std::string socket ("ws2_32.socket");
	bool socket_matched = false;
	std::string connect ("ws2_32.socket");
	bool connect_matched = false;
	std::string bind ("ws2_32.bind");
	bool bind_matched = false;
	std::string listen ("ws2_32.listen");
	bool listen_matched = false;
	std::string send ("ws2_32.send");
	bool send_matched = false;
	std::string recv ("ws2_32.recv");
	bool recv_matched = false;
	std::string sendto ("ws2_32.sendto");
	bool sendto_matched = false;
	std::string recvfrom ("ws2_32.recvfrom");
	bool recvfrom_matched = false;

	std::string internet_open ("wininet.internetopen");
	bool internet_open_matched = false;
	std::string internet_connect ("wininet.internetconnect");
	bool internet_connect_matched = false;
	std::string internet_open_url ("wininet.internetopenurl");
	bool internet_open_url_matched = false;
	std::string http_open_request ("wininet.httpopenrequest");
	bool http_open_request_matched = false;
	std::string internet_read_file ("wininet.internetreadfile");
	bool internet_read_file_matched = false;
	std::string internet_write_file ("wininet.internetwritefile");
	bool internet_write_file_matched = false;

	std::string url_dl_to_file ("urlmon.urldownloadtofile");
	bool url_dl_to_file_matched = false;
	std::string url_dl_to_cache_file ("urlmon.urldownloadtocachefile");
	bool url_dl_to_cache_file_matched = false;
	std::string url_open_stream ("urlmon.urlopenstream");
	bool url_open_stream_matched = false;
	std::string url_open_pull_stream ("urlmon.urlopenpullstream");
	bool url_open_pull_stream_matched = false;

	std::string coinitialize ("ole32.coinitialize");
	bool coinitialize_matched = false;
	std::string cocreate_instance ("ole32.cocreateinstance");
	bool cocreate_instance_matched = false;
	std::string navigate ("piedocvw.navigate");
	bool navigate_matched = false;
	//get_document


	for (std::vector<ImportData*>::iterator iter = imports.begin(); iter != imports.end(); iter++)
        {
                std::string *curr_string ((*iter)->toString());

                for (unsigned i = 0; i < curr_string->size(); i++)
                {
                        char lower_char = (char)tolower(curr_string->at(i));
                        char lower_c_str[1];
                        lower_c_str[0] = lower_char;
                        std::string lower (&lower_c_str[0]);
                        curr_string->replace(i, 1, lower);
                }

                if (*curr_string == socket)
                {
                        socket_matched = true;
                        continue;
                }
                if (*curr_string == connect)
                {
                        connect_matched = true;
                        continue;
                }
                if (*curr_string == bind)
                {
                        bind_matched = true;
                        continue;
                }
                if (*curr_string == listen)
                {
                        listen_matched = true;
                        continue;
                }
                if (*curr_string == send)
                {
                        send_matched = true;
                        continue;
                }
                if (*curr_string == recv)
                {
                        recv_matched = true;
                        continue;
                }
                if (*curr_string == sendto)
                {
                        sendto_matched = true;
                        continue;
                }
                if (*curr_string == recvfrom)
                {
                        recvfrom_matched = true;
                        continue;
                }
                if (*curr_string == internet_open)
                {
                        internet_open_matched = true;
                        continue;
                }
                if (*curr_string == internet_connect)
                {
                        internet_connect_matched = true;
                        continue;
                }
                if (*curr_string == internet_open_url)
                {
                        internet_open_url_matched = true;
                        continue;
                }
                if (*curr_string == http_open_request)
                {
                        http_open_request_matched = true;
                        continue;
                }
                if (*curr_string == internet_read_file)
                {
                        internet_read_file_matched = true;
                        continue;
                }
                if (*curr_string == internet_write_file)
                {
                        internet_write_file_matched = true;
                        continue;
                }
                if (*curr_string == url_dl_to_file)
                {
                        url_dl_to_file_matched = true;
                        continue;
                }
                if (*curr_string == url_dl_to_cache_file)
                {
                        url_dl_to_cache_file_matched = true;
                        continue;
                }
                if (*curr_string == url_open_stream)
                {
                        url_open_stream_matched = true;
                        continue;
                }
                if (*curr_string == url_open_pull_stream)
                {
                        url_open_pull_stream_matched = true;
                        continue;
                }
                if (*curr_string == coinitialize)
                {
                        coinitialize_matched = true;
                        continue;
                }
                if (*curr_string == cocreate_instance)
                {
                        cocreate_instance_matched = true;
                        continue;
                }
                if (*curr_string == navigate)
                {
                        navigate_matched = true;
                        continue;
                }
        }

        int socket_match_count = 0;
        int wininet_match_count = 0;
        int urlmon_match_count = 0;
        int com_match_count = 0;

        if (socket_matched)
        {
        	socket_match_count++;
        }
        if (connect_matched)
        {
        	socket_match_count++;
        }
        if (bind_matched)
        {
        	socket_match_count++;
        }
        if (listen_matched)
        {
        	socket_match_count++;
        }
        if (send_matched)
        {
        	socket_match_count++;
        }
        if (recv_matched)
        {
        	socket_match_count++;
        }
        if (sendto_matched)
        {
        	socket_match_count++;
        }
        if (recvfrom_matched)
        {
        	socket_match_count++;
        }

        if (internet_open_matched)
        {
        	wininet_match_count++;
        }
        if (internet_connect_matched)
        {
        	wininet_match_count++;
        }
        if (internet_open_url_matched)
        {
        	wininet_match_count++;
        }
        if (http_open_request_matched)
        {
        	wininet_match_count++;
        }
        if (internet_read_file_matched)
        {
        	wininet_match_count++;
        }
        if (internet_write_file_matched)
        {
        	wininet_match_count++;
        }

        if (url_dl_to_file_matched)
        {
        	urlmon_match_count++;
        }
        if (url_dl_to_cache_file_matched)
        {
        	urlmon_match_count++;
        }
        if (url_open_stream_matched)
        {
        	urlmon_match_count++;
        }
        if (url_open_pull_stream_matched)
        {
        	urlmon_match_count++;
        }

        if (coinitialize_matched)
        {
        	com_match_count++;
        }
        if (cocreate_instance_matched)
        {
        	com_match_count++;
        }
        if (navigate_matched)
        {
        	com_match_count++;
        }
        
        double percent_matches [4];

        percent_matches[0] = socket_match_count / 8.0;
        percent_matches[1] = wininet_match_count / 6.0;
        percent_matches[2] = urlmon_match_count / 4.0;
        percent_matches[3] = com_match_count / 3.0;

        int i;
        int max_index = -1;
        int max = -1;

        for (i = 0 ; i < 4 ; i++)
        {
        	if (percent_matches[i] > max)
        	{
        		max = percent_matches[i];
        		max_index = i;
        	}
        }

        probability = 90 * max;

        for (i = 0 ; i < 4 ; i++)
        {
        	if (max_index != i)
        	{
        		probability += 10 * percent_matches[i];
        	}

        	if (probability >= 90)
        	{
        		probability = 90;
        		break;
        	}
        }
	
	return probability;
}
