#include "../import_data.h"
#include "../malware_definition.h"
#include "dll_injection_definition.h"
#include <vector>
#include <string>
#include <iostream>

DLLInjectionDefinition::DLLInjectionDefinition(): MalwareDefinition()
{
	this->name = "dll injection";

	std::vector<ImportData*> imports;

	this->imports_used = imports;
}

double DLLInjectionDefinition::calculateProbability(std::vector<ImportData*> imports)
{
	double probability = 0;

	std::string virtual_alloc ("kernel32.virtualalloc");
        std::string virtual_alloc_ex ("kernel32.virtualallocex");
        bool virtual_alloc_matched = false;
        std::string write_process_memory ("kernel32.writeprocessmemory");
        bool write_process_memory_matched = false;
        std::string create_remote_thread ("kernel32.createremotethread");
        std::string create_remote_thread_ex ("kernel32.createremotethreadex");
        bool create_remote_thread_matched = false;


	for (std::vector<ImportData*>::iterator iter = imports.begin(); iter != imports.end(); iter++)
        {
                std::string *curr_string ((*iter)->toString());

                for (unsigned i = 0; i < curr_string->size(); i++)
                {
                        char lower_char = (char)tolower(curr_string->at(i));
                        char lower_c_str[1];
                        lower_c_str[0] = lower_char;
                        std::string lower (&lower_c_str[0]);
                        curr_string->replace(i, 1, lower);
                }

                if (*curr_string == virtual_alloc || *curr_string == virtual_alloc_ex)
                {
                        virtual_alloc_matched = true;
                        continue;
                }
                if (*curr_string == write_process_memory)
                {
                        write_process_memory_matched = true;
                        continue;
                }
                if (*curr_string == create_remote_thread || *curr_string == create_remote_thread_ex)
                {
                        create_remote_thread_matched = true;
                        continue;
                }
        }

        if (virtual_alloc_matched)
        {
        	probability += 30;
        }
        if (write_process_memory_matched)
        {
        	probability += 30;
        }
        if (create_remote_thread_matched)
        {
        	probability += 30;
        }
        
	
	return probability;
}
