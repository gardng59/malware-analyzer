#include "../import_data.h"
#include "../malware_definition.h"
#include "atom_bombing_injection_definition.h"
#include <vector>
#include <string>
#include <iostream>

AtomBombingInjectionDefinition::AtomBombingInjectionDefinition(): MalwareDefinition()
{
	this->name = "atom bombing injection";

	std::vector<ImportData*> imports;

	this->imports_used = imports;
}

double AtomBombingInjectionDefinition::calculateProbability(std::vector<ImportData*> imports)
{
	double probability = 0;

	std::string load_library ("kernel32.loadlibrary");
        std::string load_library_a ("kernel32.loadlibrarya");
        std::string load_library_w ("kernel32.loadlibraryw");
        std::string load_library_ex ("kernel32.loadlibraryex");
        std::string load_library_exa ("kernel32.loadlibraryexa");
        std::string load_library_exw ("kernel32.loadlibraryexw");
        bool load_library_matched = false;
        std::string open_thread ("kernel32.openthread");
        bool open_thread_matched = false;
        std::string queue_user_apc ("kernel32.queueuserapc");
        bool queue_user_apc_matched = false;


	for (std::vector<ImportData*>::iterator iter = imports.begin(); iter != imports.end(); iter++)
        {
                std::string *curr_string ((*iter)->toString());

                for (unsigned i = 0; i < curr_string->size(); i++)
                {
                        char lower_char = (char)tolower(curr_string->at(i));
                        char lower_c_str[1];
                        lower_c_str[0] = lower_char;
                        std::string lower (&lower_c_str[0]);
                        curr_string->replace(i, 1, lower);
                }

                if (*curr_string == load_library || *curr_string == load_library_a || *curr_string == load_library_w || *curr_string == load_library_ex || *curr_string == load_library_exa || *curr_string == load_library_exw)
                {
                        load_library_matched = true;
                        continue;
                }
                if (*curr_string == open_thread)
                {
                        open_thread_matched = true;
                        continue;
                }
                if (*curr_string == queue_user_apc)
                {
                        queue_user_apc_matched = true;
                        continue;
                }
        }

        if (open_thread_matched && queue_user_apc_matched)
        {
                probability = 75;

                if (load_library_matched)
                {
                        probability += 15;
                }
        }
        else
        {
                if (open_thread_matched)
                {
                        probability += 30;
                }
                if (queue_user_apc_matched)
                {
                        probability += 30;
                }
                if (load_library_matched)
                {
                        probability += 15;
                }
        }
        
	
	return probability;
}
