#include "../import_data.h"
#include "../malware_definition.h"
#include "recon_definition.h"
#include <vector>
#include <string>
#include <iostream>

ReconDefinition::ReconDefinition(): MalwareDefinition()
{
	this->name = "recon";

	std::vector<ImportData*> imports;

	this->imports_used = imports;
}

double ReconDefinition::calculateProbability(std::vector<ImportData*> imports)
{
	double probability = 0;

	std::string find_first_file ("kernel32.findfirstfile");
        bool find_first_file_matched = false;
        std::string find_next_file ("kernel32.findnextfile");
        bool find_next_file_matched = false;
        std::string get_host_name ("ws2_32.gethostname");
        bool get_host_name_matched = false;
        std::string get_startup_info ("kernel32.getstartupinfo");
        bool get_startup_info_matched = false;
        std::string get_system_default_lang_id ("kernel32.getsystemdefaultlangid");
        bool get_system_default_lang_id_matched = false;
        std::string get_system_directory ("kernel32.getsystemdirectory");
        bool get_system_directory_matched = false;
        std::string get_thread_context ("kernel32.getthreadcontext");
        bool get_thread_context_matched = false;
        std::string get_version ("kernel32.getversion");
        bool get_version_matched = false;
        std::string get_windows_directory ("kernel32.getwindowsdirectory");
        bool get_windows_directory_matched = false;
        std::string is_wow_64_process ("kernel32.iswow64process");
        bool is_wow_64_process_matched = false;
        std::string lsa_enumerate_logon_sessions ("secur32.lsaenumeratelogonsessions");
        bool lsa_enumerate_logon_sessions_matched = false;
        std::string net_share_enum ("netapi32.netshareenum");
        bool net_share_enum_matched = false;
        std::string query_directory_file ("ntoskrnl.ntquerydirectoryfile");
        bool query_directory_file_matched = false;


	for (std::vector<ImportData*>::iterator iter = imports.begin(); iter != imports.end(); iter++)
        {
                std::string *curr_string ((*iter)->toString());

                for (unsigned i = 0; i < curr_string->size(); i++)
                {
                        char lower_char = (char)tolower(curr_string->at(i));
                        char lower_c_str[1];
                        lower_c_str[0] = lower_char;
                        std::string lower (&lower_c_str[0]);
                        curr_string->replace(i, 1, lower);
                }

                if (*curr_string == find_first_file)
                {
                        find_first_file_matched = true;
                        continue;
                }
                if (*curr_string == find_next_file)
                {
                        find_next_file_matched = true;
                        continue;
                }
                if (*curr_string == get_host_name)
                {
                        get_host_name_matched = true;
                        continue;
                }
                if (*curr_string == get_startup_info)
                {
                        get_startup_info_matched = true;
                        continue;
                }
                if (*curr_string == get_system_default_lang_id)
                {
                        get_system_default_lang_id_matched = true;
                        continue;
                }
                if (*curr_string == get_system_directory)
                {
                        get_system_directory_matched = true;
                        continue;
                }
                if (*curr_string == get_thread_context)
                {
                        get_thread_context_matched = true;
                        continue;
                }
                if (*curr_string == get_version)
                {
                        get_version_matched = true;
                        continue;
                }
                if (*curr_string == get_windows_directory)
                {
                        get_windows_directory_matched = true;
                        continue;
                }
                if (*curr_string == is_wow_64_process)
                {
                        is_wow_64_process_matched = true;
                        continue;
                }
                if (*curr_string == lsa_enumerate_logon_sessions)
                {
                        lsa_enumerate_logon_sessions_matched = true;
                        continue;
                }
                if (*curr_string == net_share_enum)
                {
                        net_share_enum_matched = true;
                        continue;
                }
                if (*curr_string == query_directory_file)
                {
                        query_directory_file_matched = true;
                        continue;
                }
        }

        if (find_first_file_matched)
        {
        	probability += 7;
        }
        if (find_next_file_matched)
        {
                probability += 7;
        }
        if (get_host_name_matched)
        {
                probability += 7;
        }
        if (get_startup_info_matched)
        {
                probability += 7;
        }
        if (get_system_default_lang_id_matched)
        {
                probability += 7;
        }
        if (get_system_directory_matched)
        {
                probability += 7;
        }
        if (get_thread_context_matched)
        {
                probability += 7;
        }
        if (get_version_matched)
        {
                probability += 7;
        }
        if (get_windows_directory_matched)
        {
                probability += 7;
        }
        if (is_wow_64_process_matched)
        {
                probability += 7;
        }
        if (lsa_enumerate_logon_sessions_matched)
        {
                probability += 7;
        }
        if (net_share_enum_matched)
        {
                probability += 7;
        }
        if (query_directory_file_matched)
        {
                probability += 7;
        }
        
	
	return probability;
}
