#include "../import_data.h"
#include "../malware_definition.h"
#include "process_hollowing_definition.h"
#include <vector>
#include <string>
#include <iostream>

ProcessHollowingDefinition::ProcessHollowingDefinition(): MalwareDefinition()
{
	this->name = "process hollowing";

	std::vector<ImportData*> imports;

	this->imports_used = imports;
}

double ProcessHollowingDefinition::calculateProbability(std::vector<ImportData*> imports)
{
	double probability = 0;

	std::string create_process ("kernel32.createprocess");
	std::string create_process_a ("kernel32.createprocessa");
	bool create_process_matched = false;
	std::string get_thread_context ("kernel32.getthreadcontext");
	bool get_thread_context_matched = false;
	std::string read_process_memory ("kernel32.readprocessmemory");
	bool read_process_memory_matched = false;
	std::string nt_unmap_view_of_section ("ntoskrnl.ntunmapviewofsection");
	std::string zw_unmap_view_of_section ("ntoskrnl.zwunmapviewofsection");
	bool unmap_view_of_section_matched = false;


	for (std::vector<ImportData*>::iterator iter = imports.begin(); iter != imports.end(); iter++)
        {
                std::string *curr_string ((*iter)->toString());

                for (unsigned i = 0; i < curr_string->size(); i++)
                {
                        char lower_char = (char)tolower(curr_string->at(i));
                        char lower_c_str[1];
                        lower_c_str[0] = lower_char;
                        std::string lower (&lower_c_str[0]);
                        curr_string->replace(i, 1, lower);
                }

                if (*curr_string == create_process || *curr_string == create_process_a)
                {
                        create_process_matched = true;
                        continue;
                }
                if (*curr_string == get_thread_context)
                {
                        get_thread_context_matched = true;
                        continue;
                }
                if (*curr_string == read_process_memory)
                {
                        read_process_memory_matched = true;
                        continue;
                }
                if (*curr_string == nt_unmap_view_of_section || *curr_string == zw_unmap_view_of_section)
                {
                        unmap_view_of_section_matched = true;
                        continue;
                }
        }

        if (create_process_matched)
        {
        	probability += 20;
        }
        if (get_thread_context_matched)
        {
        	probability += 20;
        }
        if (read_process_memory_matched)
        {
        	probability += 20;
        }
        if (unmap_view_of_section_matched)
        {
        	probability += 20;
        }
        
	
	return probability;
}
