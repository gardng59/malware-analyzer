#include "../import_data.h"
#include "../malware_definition.h"
#include "downloader_definition.h"
#include <vector>
#include <string>
#include <iostream>

DownloaderDefinition::DownloaderDefinition(): MalwareDefinition()
{
	this->name = "downloader";

	std::vector<ImportData*> imports;

	this->imports_used = imports;
}

double DownloaderDefinition::calculateProbability(std::vector<ImportData*> imports)
{
	double probability = 0;

	std::string url_dl_to_file ("urlmon.urldownloadtofile");
        bool url_dl_to_file_matched = false;
        std::string winhttp_send ("winhttp.winhttpsendrequest");
        bool winhttp_send_matched = false;
        std::string socket ("ws2_32.socket");
        bool socket_matched = false;
        std::string winhttp_connect ("winhttp.winhttpconnect");
        bool winhttp_connect_matched = false;
        std::string shell_exec_a ("shell32.shellexecutea");
        std::string shell_exec_w ("shell32.shellexecutew");
        std::string shell_exec_exa ("shell32.shellexecuteexa");
        std::string shell_exec_exw ("shell32.shellexecuteexw");
        bool shell_exec_matched = false;
        std::string win_exec ("kernel32.winexec");
        bool win_exec_matched = false;
        

	for (std::vector<ImportData*>::iterator iter = imports.begin(); iter != imports.end(); iter++)
        {
                std::string *curr_string ((*iter)->toString());

                for (unsigned i = 0; i < curr_string->size(); i++)
                {
                        char lower_char = (char)tolower(curr_string->at(i));
                        char lower_c_str[1];
                        lower_c_str[0] = lower_char;
                        std::string lower (&lower_c_str[0]);
                        curr_string->replace(i, 1, lower);
                }

                if (*curr_string == url_dl_to_file)
                {
                        url_dl_to_file_matched = true;
                        continue;
                }
                if (*curr_string == winhttp_send)
                {
                        winhttp_send_matched = true;
                        continue;
                }
                if (*curr_string == socket)
                {
                        socket_matched = true;
                        continue;
                }
                if (*curr_string == winhttp_connect)
                {
                        winhttp_connect_matched = true;
                        continue;
                }
                if (*curr_string == shell_exec_a || *curr_string == shell_exec_w || *curr_string == shell_exec_exa || *curr_string == shell_exec_exw)
                {
                        shell_exec_matched = true;
                        continue;
                }
                if (*curr_string == win_exec)
                {
                        win_exec_matched = true;
                        continue;
                }
                
        }

        if ((url_dl_to_file_matched || winhttp_send_matched || socket_matched || winhttp_connect_matched) && (shell_exec_matched || win_exec_matched))
        {
                probability = 80;

                if (url_dl_to_file_matched)
                {
                        probability += 3;
                }
                if (winhttp_send_matched)
                {
                        probability += 3;
                }
                if (socket_matched)
                {
                        probability += 3;
                }
                if (winhttp_connect_matched)
                {
                        probability += 3;
                }
                if (shell_exec_matched)
                {
                        probability += 3;
                }
                if (win_exec_matched)
                {
                        probability += 3;
                }

        }
        else if (url_dl_to_file_matched || winhttp_send_matched || socket_matched || winhttp_connect_matched)
        {
                probability = 50;

                if (url_dl_to_file_matched)
                {
                        probability += 5;
                }
                if (winhttp_send_matched)
                {
                        probability += 5;
                }
                if (socket_matched)
                {
                        probability += 5;
                }
                if (winhttp_connect_matched)
                {
                        probability += 5;
                }
        }
        else if (shell_exec_matched || win_exec_matched)
        {
                probability = 30;

                if (shell_exec_matched)
                {
                        probability += 10;
                }
                if (win_exec_matched)
                {
                        probability += 10;
                }
        }
        
	
	return probability;
}
