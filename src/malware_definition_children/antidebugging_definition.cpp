#include "../import_data.h"
#include "../malware_definition.h"
#include "antidebugging_definition.h"
#include <vector>
#include <string>
#include <iostream>

AntidebuggingDefinition::AntidebuggingDefinition(): MalwareDefinition()
{
	this->name = "antidebugging";

	std::vector<ImportData*> imports;

	this->imports_used = imports;
}

double AntidebuggingDefinition::calculateProbability(std::vector<ImportData*> imports)
{
	double probability = 0;

	std::string is_debugger_present ("kernel32.isdebuggerpresent");
	bool is_debugger_present_matched = false;
	std::string check_remote_debugger_present ("kernel32.checkremotedebuggerpresent");
	bool check_remote_debugger_present_matched = false;

	for (std::vector<ImportData*>::iterator iter = imports.begin(); iter != imports.end(); iter++)
        {
                std::string *curr_string ((*iter)->toString());

                for (unsigned i = 0; i < curr_string->size(); i++)
                {
                        char lower_char = (char)tolower(curr_string->at(i));
                        char lower_c_str[1];
                        lower_c_str[0] = lower_char;
                        std::string lower (&lower_c_str[0]);
                        curr_string->replace(i, 1, lower);
                }

                if (*curr_string == is_debugger_present)
                {
                        is_debugger_present_matched = true;
                        continue;
                }
		if (*curr_string == check_remote_debugger_present)
		{
			check_remote_debugger_present_matched = true;
			continue;
		}
        }

	if (is_debugger_present_matched)
	{
		probability = 95;
	}
	
	if (check_remote_debugger_present_matched)
	{
		probability = 95;
	}
	
	return probability;
}
