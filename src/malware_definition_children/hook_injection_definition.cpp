#include "../import_data.h"
#include "../malware_definition.h"
#include "hook_injection_definition.h"
#include <vector>
#include <string>
#include <iostream>

HookInjectionDefinition::HookInjectionDefinition(): MalwareDefinition()
{
	this->name = "hook injection";

	std::vector<ImportData*> imports;

	this->imports_used = imports;
}

double HookInjectionDefinition::calculateProbability(std::vector<ImportData*> imports)
{
	double probability = 0;

	std::string load_lib ("kernel32.loadlibrary");
        std::string load_lib_ex ("kernel32.loadlibraryex");
        bool load_lib_matched = false;
        std::string get_proc_addr ("kernel32.getprocaddress");
        bool get_proc_addr_matched = false;
        std::string thread_32_next ("kernel32.thread32next");
        bool thread_32_next_matched = false;
        std::string set_windows_hook_exa ("user32.setwindowshookexa");
        std::string set_windows_hook_exw ("user32.setwindowshookexw");
        bool set_windows_hook_matched = false;
        

	for (std::vector<ImportData*>::iterator iter = imports.begin(); iter != imports.end(); iter++)
        {
                std::string *curr_string ((*iter)->toString());

                for (unsigned i = 0; i < curr_string->size(); i++)
                {
                        char lower_char = (char)tolower(curr_string->at(i));
                        char lower_c_str[1];
                        lower_c_str[0] = lower_char;
                        std::string lower (&lower_c_str[0]);
                        curr_string->replace(i, 1, lower);
                }

                if (*curr_string == load_lib || *curr_string == load_lib_ex)
                {
                        load_lib_matched = true;
                        continue;
                }
                if (*curr_string == get_proc_addr)
                {
                        get_proc_addr_matched = true;
                        continue;
                }
                if (*curr_string == thread_32_next)
                {
                        thread_32_next_matched = true;
                        continue;
                }
                if (*curr_string == set_windows_hook_exa || *curr_string == set_windows_hook_exw)
                {
                        set_windows_hook_matched = true;
                        continue;
                }
                
        }

        if (load_lib_matched)
        {
                probability += 23;
        }
        if (get_proc_addr_matched)
        {
                probability += 23;
        }
        if (thread_32_next_matched)
        {
                probability += 23;
        }
        if (set_windows_hook_matched)
        {
                probability += 23;
        }
        
	
	return probability;
}
