#include "../import_data.h"
#include "../malware_definition.h"
#include "ransomware_definition.h"
#include <vector>
#include <string>
#include <iostream>

RansomwareDefinition::RansomwareDefinition(): MalwareDefinition()
{
	this->name = "ransomware";

	std::vector<ImportData*> imports;

	this->imports_used = imports;
}

double RansomwareDefinition::calculateProbability(std::vector<ImportData*> imports)
{
	double probability = 0;

	std::string crypt_acquire_context ("advapi.cryptacquirecontext");
	bool crypt_acquire_context_matched = false;
	std::string find_first_file ("kernel32.findfirstfile");
	bool find_first_file_matched = false;
	std::string find_next_file ("kernel32.findnextfile");
	bool find_next_file_matched = false;
	std::string net_share_enum ("netapi32.netshareenum");
	bool net_share_enum_matched = false;
	std::string query_directory_file ("ntoskrnl.ntquerydirectoryfile");
	bool query_directory_file_matched = false;
	std::string open_file ("kernel32.openfile");
	bool open_file_matched = false;
	std::string read_file ("kernel32.readfile");
	bool read_file_matched = false;


	for (std::vector<ImportData*>::iterator iter = imports.begin(); iter != imports.end(); iter++)
        {
                std::string *curr_string ((*iter)->toString());

                for (unsigned i = 0; i < curr_string->size(); i++)
                {
                        char lower_char = (char)tolower(curr_string->at(i));
                        char lower_c_str[1];
                        lower_c_str[0] = lower_char;
                        std::string lower (&lower_c_str[0]);
                        curr_string->replace(i, 1, lower);
                }

                if (*curr_string == crypt_acquire_context)
                {
                        crypt_acquire_context_matched = true;
                        continue;
                }
                if (*curr_string == find_first_file)
                {
                        find_first_file_matched = true;
                        continue;
                }
                if (*curr_string == find_next_file)
                {
                        find_next_file_matched = true;
                        continue;
                }
                if (*curr_string == net_share_enum)
                {
                        net_share_enum_matched = true;
                        continue;
                }
                if (*curr_string == query_directory_file)
                {
                        query_directory_file_matched = true;
                        continue;
                }
                if (*curr_string == open_file)
                {
                        open_file_matched = true;
                        continue;
                }
                if (*curr_string == read_file)
                {
                        read_file_matched = true;
                        continue;
                }
        }

        if (crypt_acquire_context_matched)
        {
        	probability += 13;
        }
        if (find_first_file_matched)
        {
        	probability += 13;
        }
        if (find_next_file_matched)
        {
        	probability += 13;
        }
        if (net_share_enum_matched)
        {
        	probability += 13;
        }
        if (query_directory_file_matched)
        {
        	probability += 13;
        }
        if (open_file_matched)
        {
        	probability += 13;
        }
        if (read_file_matched)
        {
        	probability += 13;
        }
        
	
	return probability;
}
