#include "../import_data.h"
#include "../malware_definition.h"
#include "screen_capture_definition.h"
#include <vector>
#include <string>
#include <iostream>

ScreenCaptureDefinition::ScreenCaptureDefinition(): MalwareDefinition()
{
	this->name = "screen capture";

	std::vector<ImportData*> imports;

	this->imports_used = imports;
}

double ScreenCaptureDefinition::calculateProbability(std::vector<ImportData*> imports)
{
	double probability = 0;

	std::string get_dc ("user32.getdc");
	bool get_dc_matched = false;
	std::string get_window_dc ("user32.getwindowdc");
	bool get_window_dc_matched = false;
	std::string create_compatible_dc ("gdi32.createcompatibledc");
	bool create_compatible_dc_matched = false;
	std::string create_compatible_bitmap ("gdi32.createcompatiblebitmap");
	bool create_compatible_bitmap_matched = false;
	std::string select_object ("gdi32.selectobject");
	bool select_object_matched = false;
	std::string bit_blt ("gdi32.bitblt");
	bool bit_blt_matched = false;
	std::string write_file ("kernel32.writefile");
	bool write_file_matched = false;

	for (std::vector<ImportData*>::iterator iter = imports.begin(); iter != imports.end(); iter++)
        {
                std::string *curr_string ((*iter)->toString());

                for (unsigned i = 0; i < curr_string->size(); i++)
                {
                        char lower_char = (char)tolower(curr_string->at(i));
                        char lower_c_str[1];
                        lower_c_str[0] = lower_char;
                        std::string lower (&lower_c_str[0]);
                        curr_string->replace(i, 1, lower);
                }

                if (*curr_string == get_dc)
                {
                        get_dc_matched = true;
                        continue;
                }
                if (*curr_string == get_window_dc)
                {
                        get_window_dc_matched = true;
                        continue;
                }
                if (*curr_string == create_compatible_dc)
                {
                        create_compatible_dc_matched = true;
                        continue;
                }
                if (*curr_string == create_compatible_bitmap)
                {
                        create_compatible_bitmap_matched = true;
                        continue;
                }
                if (*curr_string == select_object)
                {
                        select_object_matched = true;
                        continue;
                }
                if (*curr_string == bit_blt)
                {
                        bit_blt_matched = true;
                        continue;
                }
                if (*curr_string == write_file)
                {
                        write_file_matched = true;
                }
        }

	if (get_dc_matched || get_window_dc_matched)
	{
		probability += 15;
	}
	
	if (create_compatible_dc_matched)
	{
		probability += 15;
	}

	if (create_compatible_bitmap_matched)
	{
		probability += 15;
	}

	if (select_object_matched)
	{
		probability += 15;
	}

	if (bit_blt_matched)
	{
		probability += 15;
	}

	if (write_file_matched)
	{
		probability += 15;
	}
	
	return probability;
}
