#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <fstream>
#include <string.h>
#include <vector>
#include "import_data.h"
#include "malware_definition.h"
#include "malware_definition_children/keylogger_definition.h"

int main(int argc, char **argv)
{
	std::string in_file(argv[1]);

	std::vector<ImportData*> imports;
	std::vector<std::string> strings;

	std::string readpe_command = in_file;
	readpe_command = "readpe --format csv -i " + readpe_command;
	const char* c_str_readpe_command = readpe_command.c_str();

	FILE *result;
	char buffer[255];
	result = popen(c_str_readpe_command, "r");

	std::string current_library;

	while(fgets(buffer, 255, result) != NULL)
	{
		if(strncmp(buffer, "Library", 7) == 0)
		{
			if(fgets(buffer, 255, result) != NULL)
			{
				current_library = buffer;
				std::size_t end_pos = current_library.find(".") - 5;
				current_library = current_library.substr(5, end_pos);
			}
		}
		else if(strncmp(buffer, "Functions", 9) == 0)
		{
			continue;
		}
		else if(strncmp(buffer, "Function", 8) == 0)
		{
			if(fgets(buffer, 255, result) != NULL)
			{
				std::string function(buffer);

				if(strncmp(buffer, "Name,", 5) == 0)
				{
					function = function.substr(5, function.length() - 6);
					//std::cout << function << "\n";
					ImportData *import_data = new ImportData(current_library, function, false);
					//std::cout << *import_data->toString() << "\n";
					imports.insert(imports.end(), import_data);
				}
				else if(strncmp(buffer, "Ordinal,", 8) == 0)
				{
					function = function.substr(8, function.length() - 9);
					ImportData *import_data = new ImportData(current_library, function, true);
					imports.insert(imports.end(), import_data);
				}

				/*else if(strncmp(buffer, "Functions", 9) == 0)
				{
					continue;
				}
				else if(strncmp(buffer, "Function", 8) == 0)
				{
					if(fgets(buffer, 255, result) != NULL)
					{
						std::string function(buffer);

						if(strncmp(buffer, "Name,", 5) == 0)
						{
							function = function.substr(5, function.length() - 6);
							ImportData import_data(current_library, function, false);
							std::cout << function << "\n";
							std::cout << import_data.toString() << "\n";
							imports.insert(imports.end(), &import_data);
						}
										}
				}*/
				
			}
		}
	}
	pclose(result);

	std::string pestr_command = in_file;
	pestr_command = "pestr " + pestr_command;
	const char* c_str_pestr_command = pestr_command.c_str();

	result = popen(c_str_pestr_command, "r");

	while(fgets(buffer, 255, result) != NULL)
	{
		std::string str (buffer);
		strings.insert(strings.end(), str);
	}

	// Begin running against definitions
	// Malware definition (parent class) can be initialized with values to check for in files if type of malware does not have an object
	std::cout << "Probabilities that file is malicious for types of malware:" << "\n";

	KeyloggerDefinition keylogger;

	std::cout << "keylogger: " << keylogger.calculateProbability(imports) << "\n";
}
