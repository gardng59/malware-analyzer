#include "../import_data.h"
#include "../malware_definition.h"
#include "keylogger_definition.h"
#include <vector>
#include <string>
#include <iostream>

KeyloggerDefinition::KeyloggerDefinition(): MalwareDefinition()
{
	this->name = "keylogger";
	
	std::vector<ImportData*> keylogger_imports;
        keylogger_imports.insert(keylogger_imports.end(), new ImportData("user32", "attachthreadinput", false));
        keylogger_imports.insert(keylogger_imports.end(), new ImportData("ntdll", "findwindow", false));
        keylogger_imports.insert(keylogger_imports.end(), new ImportData("ntdll", "findwindowa", false));
        keylogger_imports.insert(keylogger_imports.end(), new ImportData("ntdll", "findwindoww", false));
        keylogger_imports.insert(keylogger_imports.end(), new ImportData("ntdll", "getasynckeystate", false));
        keylogger_imports.insert(keylogger_imports.end(), new ImportData("ntdll", "getforegroundwindow", false));
        keylogger_imports.insert(keylogger_imports.end(), new ImportData("ntdll", "getkeystate", false));
        keylogger_imports.insert(keylogger_imports.end(), new ImportData("ntdll", "getmessage", false));
        keylogger_imports.insert(keylogger_imports.end(), new ImportData("kernel32", "mapvirtualkey", false));
        keylogger_imports.insert(keylogger_imports.end(), new ImportData("winsock", "registerhotkey", false));
        keylogger_imports.insert(keylogger_imports.end(), new ImportData("user32", "setwindowshookex", false));
        keylogger_imports.insert(keylogger_imports.end(), new ImportData("user32", "setwindowshookexa", false));
        keylogger_imports.insert(keylogger_imports.end(), new ImportData("user32", "setwindowshookexw", false));
        keylogger_imports.insert(keylogger_imports.end(), new ImportData("user32", "showwindow", false));
        keylogger_imports.insert(keylogger_imports.end(), new ImportData("user32", "unhookwindowshookex", false));
	
	this->imports_used = keylogger_imports;
}

double KeyloggerDefinition::calculateProbability(std::vector<ImportData*> imports)
{
	return 0;
}
